#!/bin/bash -e

function usage() {
  echo "Usage: ./up [OPTIONS] "
  echo
  echo "Creates a stand-alone MongoDB instance or cluster. The cluster can be a replica"
  echo "set or sharded with multiple replica sets."
  echo
  echo "Currently only Amazon EC2 is supported, but other platforms like Rackspace will"
  echo "be added. The instances are currently using Amazon Linux, but can be extended to"
  echo "use other operating systems."
  echo
  echo "MongoDB options:"
  echo "  --nodes NUM          adds NUM data nodes to replica set (requires"
  echo "                       --replicaset, default=3)"
  echo "  --sharded NUM        creates NUM of shards, each replica sets (default=1)"
  echo "  --config NUM         adds NUM config servers to sharded setup (requires"
  echo "                       --sharded, NUM must be 1 or 3, default=1)"
  echo "  --mongos NUM         starts NUM mongos processes (requires --sharded,"
  echo "                       default=1)"
  echo "  --mongo_version VER  MongoDB version to use (default=latest stable)"
  echo "  --smallfiles         Use small files when preallocating"
  echo
  echo "Disk options:"
  echo "  --disk_size NUM      Disk size in GBs (default=20)"
  echo "  --filesystem TYPE    File system (default=ext4)"
  echo "  --lvm                Enable LVM (default=false)"
  echo "  --mount_options OPTS Mount options (default=noatime,noexec)"
  echo "  --piops NUM          EBS provisioned IOPS (default=disabled)"
  echo "  --raid NUM           RAID level (default=disabled)"
  echo "  --readahead NUM      Read-ahead size in 512B blocks (default=32)"
  echo
  echo "Amazon EC2 options:"
  echo "  --region REGION      The Amazon EC2 region to use. Valid options are:"
  echo "                       ap-northeast-1, ap-southeast-1, ap-southeast-2,"
  echo "                       eu-west-1, sa-east-1, us-east-1, us-west-1, us-west-2."
  echo "                       (default=eu-west-1)"
  echo "  --instance_type TYPE The Amazon EC2 instance type to use. See "
  echo "                       http://aws.amazon.com/ec2/instance-types/ for the full"
  echo "                       list (default=t1.micro)"
  echo
  echo "Additional options:"
  echo "  --data_bags_only     Only generate the data bags for Chef Solo (for replica"
  echo "                       sets and shards)."
  echo "  --provision_only     Only re-provision to re-execute the Chef recipes."
  echo "  --skip_create        Skip the creation of the instances (e.g. they are"
  echo "                       already running."
  echo "  --skip_check         Skip check for existing instance(s)."
  echo "  --help               Display this help and exit."
}

function log() {
  local msg=$1
  local opts=$2
  local time=`date +%H:%M:%S`
  echo $opts "$time $msg"
}

function check_region() {
  for valid_region in ap-northeast-1 ap-southeast-1 ap-southeast-2 eu-west-1 \
      sa-east-1 us-east-1 us-west-1 us-west-2; do
    [ "$1" == "$valid_region" ] && return
  done
  log "Invalid region: $1"
}

function run_vagrant() {
  log "Removing data_bags..."
  rm -f data_bags/node/*

  start_time=$(date +%s)

  VAGRANT_FIRST_RUN=true \
  VAGRANT_OMNIBUS=true \
  VAGRANT_AWS_REGION="$region" \
  VAGRANT_AWS_INSTANCE_TYPE="$instance_type" \
    vagrant up --provider=aws

  stop_time=$(date +%s)
  log "Vagrant took $(($stop_time - $start_time))s"
}

function generate_data_bags() {
  set_name=$1
  start_time=$(date +%s)

  log "Regenerating data bags with hostnames..."
  mkdir -p data_bags/node/
  rm -f    data_bags/node/*
  for instance in `vagrant status | grep "running"`; do
    if [[ "$instance" =~ ^mongodb- ]]; then
      out_file=data_bags/node/$instance.json
      log "Writing $out_file...
      "
      fqdn=`vagrant ssh $instance -c "hostname -f" | grep "^ip"`
      # Remove trailing newline
      fqdn="${fqdn%"${fqdn##*[![:space:]]}"}" #"
      hostname=`echo $fqdn | cut -d'.' -f1`

      in_file="data"
      [[ "$instance" =~ cfg ]]    && in_file="config"
      [[ "$instance" =~ mongos ]] && in_file="mongos"

      sed -e "s/<NAME>/$instance/" \
          -e "s/<FQDN>/$fqdn/" \
          -e "s/<HOSTNAME>/$hostname/" \
          -e "s/<SET_NAME>/$set_name/" \
          data_bags/mongodb-$in_file.json.template > $out_file
    fi
  done
  stop_time=$(date +%s)
  log "Data bag generation took $(($stop_time - $start_time))s"
}

region=eu-west-1
instance_type=t1.micro
data_bags_only=false
provision_only=false
skip_check=true
skip_create=false
nodes=3
shards=1
config=1
mongos=1

while [ $# -gt 0 ]; do
  case "$1" in
    --region)         shift; region="$1";;
    --instance_type)  shift; instance_type="$1";;
    --data_bags_only) data_bags_only=true;;
    --provision_only) provision_only=true;;
    --skip_create)    skip_create=true;;
    --skip_check)     skip_check=false;;
    --nodes)          shift; nodes="$1";;
    --sharded)        shift; shards="$1";;
    --config)         shift; config="$1";;
    --mongos)         shift; mongos="$1";;
    -h|--help)        usage; exit 1;;
    *)                break;;
  esac
  shift
done

if [ $skip_create == false ] && [ $data_bags_only == false ] && \
   [ $provision_only == false ]; then
  check_region "$region"

  log "Running Berkshelf to install Chef cookbook dependencies..."
  berks install -p cookbooks/

  if [ $skip_check == true ]; then
    log "Checking for existing instances..."
    if vagrant status | grep -q 'not created'; then
      log "No instance(s) found, creating..."
      run_vagrant
    else
      log "Found existing instance(s)"
    fi
  else
    run_vagrant
  fi
fi

if [ $provision_only == false ]; then
  generate_data_bags rs1
fi

if [ $data_bags_only == false ]; then
  start_time=$(date +%s)
  vagrant provision
  stop_time=$(date +%s)
  log "Vagrant provision took $(($stop_time - $start_time))s"
fi