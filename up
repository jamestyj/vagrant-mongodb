#!/bin/bash -e

function usage() {
  echo "Usage: ./up [OPTIONS] "
  echo
  echo "Creates MongoDB instances with Vagrant and Chef. See"
  echo "https://github.com/jamestyj/vagrant-mongodb for details."
  echo
  echo "Options:"
  echo "  --region REGION      The Amazon EC2 region to use. Valid options are:"
  echo "                       ap-northeast-1, ap-southeast-1, ap-southeast-2,"
  echo "                       eu-west-1, sa-east-1, us-east-1, us-west-1, us-west-2."
  echo "                       Defaults to eu-west-1."
  echo "  --instance_type TYPE The Amazon EC2 instance type to use. See "
  echo "                       http://aws.amazon.com/ec2/instance-types/ for the full"
  echo "                       list. Defaults to t1.micro."
  echo "  --data_bags_only     Only generate the data bags for Chef Solo (for replica"
  echo "                       sets and shards)."
  echo "  --skip_create        Skip the creation of the instances (e.g. they are"
  echo "                       already running."
  echo "  --skip_check         Skip check for existing instance(s)."
  echo "  --help               Display this help and exit."
}

function log() {
  local msg=$1
  local opts=$2
  local time=`date +%H:%M:%S`
  echo $opts "$time $msg"
}

function check_region() {
  for valid_region in ap-northeast-1 ap-southeast-1 ap-southeast-2 eu-west-1 \
      sa-east-1 us-east-1 us-west-1 us-west-2; do
    [ "$1" == "$valid_region" ] && return
  done
  log "Invalid region: $1"
}

function run_vagrant() {
  start_time=$(date +%s)

  VAGRANT_OMNIBUS=true \
  VAGRANT_AWS_REGION="$region" \
  VAGRANT_AWS_INSTANCE_TYPE="$instance_type" \
    vagrant up --provider=aws

  stop_time=$(date +%s)
  log "Vagrant took $(($stop_time - $start_time))s"
}

function generate_data_bags() {
  log "Regenerating data bags with hostnames..."
  mkdir -p data_bags/node/
  rm -f    data_bags/node/*
  for instance in `vagrant status | grep "running"`; do
    if [[ "$instance" =~ ^mongodb- ]]; then
      out_file=data_bags/node/$instance.json
      log "Writing $out_file...
      "
      fqdn=`vagrant ssh $instance -c "hostname -f" | grep "^ip"`
      # Remove trailing newline
      fqdn="${fqdn%"${fqdn##*[![:space:]]}"}"
      hostname=`echo $fqdn | cut -d'.' -f1`

      cp data_bags/mongodb.json.template $out_file
      sed -i .org "s/<FQDN>/$fqdn/" $out_file
      sed -i .org "s/<HOSTNAME>/$hostname/" $out_file
      rm $out_file.org
    fi
  done
}

region=eu-west-1
instance_type=t1.micro
check_existing=true
data_bags_only=false
skip_create=false

while [ $# -gt 0 ]; do
  case "$1" in
    --region)         shift; region="$1";;
    --instance_type)  shift; instance_type="$1";;
    --data_bags_only) data_bags_only=true;;
    --skip_create)    skip_create=true;;
    --skip_check)     check_existing=false;;
    -h|--help)        usage; exit 1;;
    *)                break;;
  esac
  shift
done

if [ $skip_create == false ]; then
  if [ $data_bags_only == false ]; then
    check_region "$region"

    log "Running Berkshelf to install Chef cookbook dependencies..."
    berks install -p cookbooks/

    if [ $check_existing == true ]; then
      log "Checking for existing instances..."
      if vagrant status | grep -q 'not created'; then
        log "No instance(s) found, creating..."
        run_vagrant
      else
        log "Found existing instance(s)"
      fi
    else
      run_vagrant
    fi
  fi
fi

generate_data_bags

if [ $data_bags_only == false ]; then
  VAGRANT_REPLICASET=1 vagrant provision
fi